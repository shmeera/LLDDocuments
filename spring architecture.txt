https://www.geeksforgeeks.org/spring-framework-architecture/

https://wipro.udemy.com/course/spring-interview-questions-and-answers/learn/lecture/7654342


https://wipro.udemy.com/course/spring-interview-questions-and-answers/learn/lecture/7654390#overview
#overview
---------------------
The Spring framework is a widely-used open-source Java framework 
 
Its architecture is designed around two core principles: Dependency Injection (DI) and Aspect-Oriented Programming (AOP).

The Spring framework consists of several 

modules, which can be categorized into four main areas: Core Container, Data Access/Integration, Web, and Miscellaneous.

The Core Container provides the fundamental functionality of the Spring framework, including the IoC container and ApplicationContext. 

The Data Access/Integration area provides support for integrating with databases and other data sources. 

The Web area provides support for building web applications, including the Spring MVC and Spring WebFlux modules. 

The Miscellaneous area includes other modules that provide additional functionality, such as the Spring Security module for authentication and authorization features.

DI: loose coupling between components
Ioc container : creating and mangin instances of java beans and application context

AOP: Aspect oriented programming- modularize concerns such as logging, security, transaction management apply them to multiple components of application

Modularity: 
ORM , JPA - hibernate

Transaction

prehandler
post handler
======================

In this example, MyInterceptor implements Spring's HandlerInterceptor interface, which has three methods:

preHandle(): This method is executed before the actual handler is executed. This can be used to add pre-processing logic. If this method returns false, the execution flow will stop here and not call the actual handler method.

postHandle(): This method is executed after the handler method is executed, hence allowing post-processing operations.

afterCompletion(): This method is executed after the complete request has finished. It's useful for cleanup work.

To use this interceptor, you would need to register it in your Spring configuration. This can be done in Java Config or XML Config. Here's an example with Java Config:

Interceptors are used in programming to intercept an operation at a certain point and perhaps modify the behavior of the operation. In Java, this is commonly used in frameworks like Spring and Hibernate.

Here's a simple example of an interceptor in Java using Spring's `HandlerInterceptor`:

```java
import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class MyInterceptor implements HandlerInterceptor {
    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
        System.out.println("Pre Handle method is Calling");
        return true;
    }

    @Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {
        System.out.println("Post Handle method is Calling");
    }

    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception exception) throws Exception {
        System.out.println("Request and Response is completed");
    }
}
```

In this example, `MyInterceptor` implements Spring's `HandlerInterceptor` interface, which has three methods:

1. `preHandle()`: This method is executed before the actual handler is executed. This can be used to add pre-processing logic. If this method returns `false`, the execution flow will stop here and not call the actual handler method.

2. `postHandle()`: This method is executed after the handler method is executed, hence allowing post-processing operations.

3. `afterCompletion()`: This method is executed after the complete request has finished. It's useful for cleanup work.

To use this interceptor, you would need to register it in your Spring configuration. This can be done in Java Config or XML Config. Here's an example with Java Config:

```java
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

public class AppConfig implements WebMvcConfigurer {
    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(new MyInterceptor());
    }
}
```

In this configuration, `MyInterceptor` is registered to intercept all requests. You can also specify patterns to match specific requests.


